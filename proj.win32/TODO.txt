
*see the readme in proj.android
To get this on my phone:
-compile the c++ code with the following commands in cygwin:
	export NDK_ROOT=/cygdrive/c/android-ndk-r9d/
	cd /cygdrive/c/cocos2d-x-3.0alpha0/cocos2d-x-3.0alpha0/projects/EggScramble/proj.android
	./build_native.sh
-build the apk
	ant debug install (after this command, the phone may ask to allow usb debugging.  Press OK)

============================================================================================================

-Possible Images:
clker
openclipart
wikimedia commons
wooden plank: https://openclipart.org/detail/162739/wooden-plank-dark-by-rdevries
some cars: http://www.wpclipart.com/transportation/car/more_cars/index.html
=================
Images I am using:
chicken: https://openclipart.org/detail/26012/chicken-roundcartoon-by-bloodsong
vehicles: https://openclipart.org/search/?query=spadassin
wood plank: http://pixabay.com/en/strip-of-wood-wood-border-wood-41011/

============================================================================================================

Before version 1.0 release:
-kill music when program goes to background
-preload audio?  The game now hesitates right before playing audio.
-death image
-highest level achieved screen (after top scores)?
-replace level 10
-disappearing logs different color
-full test!
-option to rate game
-I might want to make sure the vehicle images don't need to be cropped
-do sprites look like shit at lower/higher resolutions?
-review scaling of word images...do they need to be scaled by width and height separately?
-hunt for obvious memory leaks
-ads
--what kinds of ads is Super Frogger using (some sort of wall)



After version 1.0 release:
-tag the release on github
-back button on android
-egg scramble mode was renamed survival.  Refactor code to reflect this.
-after completing 12 levels in main mode display a "congrats! keep going!" kind of image.
-show remaining lives as chicken images
-hunt for memory leaks
-the text on the instruction/about screen is a slight different size
--Is deleting field references in destructor standard practice?
-jgnation splash screen
-make the egg not spawn so close to left and right edge?
-Add chicken to the actionLayer
-should I have waves in egg scramble?  Wave 1, Wave 2?  Wipe out all traffic when beating waves?
-link to play/iStore on about screen?
-scale chicken movement?  Should it take x movements to get the edge of the screen regardless of screen size?
 Think about how many movements a chicken should be able to make across a log.  I certainly don't want to
 scale the movement to be greater than it is currently...only less than it is, if at all.
-Balancing Difficulty
--The frequency that logs disappear might need to be tweaked (different in main mode vs egg scramble)
--Number of lives might need to be tweaked
-when current score exceeds high score, increment high score along with current score?
-tinker with egg scramble low/top speed settings
-for egg scramble mode display the level number with the top scores?
-display which mode it is with the top scores
-upgrade to version 3.0 of cocos2d-x
-add dates to top scores
-logs of various lengths
-alligators in water
-easy/medium/hard modes?
-powers ups?
--eliminate traffic
--extra life
-more "enemies"?
-use more C++11

=========================================================================================
Code Cleanup:
-when to include #include declarations in .h and when in .cpp?
-make Dimensions a singleton that can be reference like CCDirector (so I don't have to new it in every class)
-should I have a return; after every killChicken() in the update loop?
-figure out how to have an 'exit' button on a layer that replaces the current layer with the previous
layer (e.g. on the Main Menu or the Game Over screens).  This might involve callbacks on the parent layer,
or doing a "getParent" kind of thing.
-add vehicles to CCArray instead of vector?
-clean up disappearing log stuff:
	-clean up the log class.  It inherits from Log...make it look like it.

===========================================================================================


Notes:
-don't forget to release() and/or delete all of the objects that are created that are not being managed by the cocos2d-x memory pool!

NOTES:
-I want the standard logs to spawn more frequently than the disappearing logs.  To determine the probability, I simply added more logs to a given lane in the plist file.

NOTES:
-If I get errors like "undefined reference to" when compiling with g++ but not with Visual Studio or Xcode, it is probably because I didn't add new class definitions
into the proj.android/jni/Android.mk file.
----------------------------------------------------------------------------------------------------------------------------------------
options for refactoring vehicle spawning:
-vehicles can inherit from CCSprite.  then the CCObject * sender can be that sprite and I can easily remove it

+I need to maintain a list of sprites currently on the screen.  I can precreate them like I am now (this is a waste if
many of them are not on the screen), or I can create them on the fly (waste of time constantly initializing)
+If I precreate them, I can add a 'isVisible' property to check.  if !isVisible, don't execute any logic
+If I precreate them, where would I do it?  In GameLayer?  In each Lane?  The lane can only produce certain vehicles.
+Each lane could precreate vehicles, have a list of them, and pick them at random to display them
+If I were to do that, I would have to somehow notate which ones are currently visible
+CCSprite has a isVisible property
+If I create them on the fly, I can:
	-create them in lane
	-add the sprite to the layer
	-after adding the sprite, add the vehicle to a list of vehicles....isVisible will be true
	-in the callback, isVisible will be false after removing it from the layer (either that or I will set it to false)
	-in the update method I can scan the list of vehicles.  Vehicles where !isVisible, delete it
+Ideally I want the object destroyed right when the action is over!
+Maybe initiate the action in the Vehicle class...with the callback in the Vehicle class.  Then the callback can call a 
'delete this'?  Maybe?  I SHOULD TRY THIS FIRST.
+I Think the option directly above would work well....but it is not optimal.  The best thing to do will probably be to
have Vehicle inherit from CCSprite and have the callback remove it.  I would have to redo sprite intersection logic...
although that may already be built into CCSprite
+Really...the best way would probably be to NOT create these sprite dynamically.  Use the isVisible property.  I would
just have to make sure that we never try to add a sprite that is already doing something on the screen.
+Maybe SpriteContainer should be a CCNode instead of CCObject (a CCNode is a CCObject, right?), and then the whole object
can be sent to the callback (THIS will not work because *sender is the Sprite, not the SpriteContainer)
----------------------------------------------------------------------------------------------------------------------

-Keyboard input on version > 3.0 alpha: http://www.cocos2d-x.org/forums/6/topics/39145

-----------------------------------------------------------------------------------------------------------------
Passing Parameters into CCObjects:
http://www.cocos2d-x.org/forums/6/topics/14363

----------------------------------------------------------------------------------------------------------
Other chicken game:
http://www.flash-game.net/game/1892/chicken-road.html

-----------------------------------------------------------------------------------------------------------

To get the build working via eclipse:
-do a whole bunch of crap that I don't remember
-right click project > properties > C/C++ Build > Builder Settings
-Uncheck "Use default build command"
-Put this in the build command field: bash "/cygdrive/c/cocos2d-x-3.0alpha0/cocos2d-x-3.0alpha0/projects/ChickenCrossing/proj.android/build_native.sh"

===================================================================
http://www.cocos2d-x.org/wiki/Audio_formats_supported_by_CocosDenshion_on_different_platforms

http://indiegamemusic.com/viewtrack.php?id=6 Complete - Game
http://indiegamemusic.com/viewtrack.php?id=1331 Platform - intro
http://indiegamemusic.com/viewtrack.php?id=92 SpaceQuest - ending
^I can even do those as midi

chiptunes:
http://opengameart.org/sites/default/files/A%20Journey%20Awaits.mp3 game over?  very metal gear esque.
http://www.indiegamemusic.com/viewtrack.php?id=1432 game or intro (costs 10)
http://freemusicarchive.org/music/Rolemusic/Pop_Singles_Compilation_2014/01_rolemusic_-_bacterial_love

http://freemusicarchive.org/genre/Chiptune/?sort=track_date_published&d=1&page=4

https://www.makegameswith.us/gamernews/281/top-20-best-free-music-and-sound-effect-resources
http://videogamecaster.com/royalty-free-music-and-sounds
http://gamedev.stackexchange.com/questions/14/where-can-i-find-free-music-for-my-game


http://freemusicarchive.org/music/RoccoW/~/Vengaboys_-_Boom_Boom_Boom_Boom_LSDJ_Remix (hey now hey now)
http://freemusicarchive.org/music/RoccoW/~/Chipho_instrumental
http://freemusicarchive.org/music/RoccoW/~/Hello_Chiptune_Cover
http://freemusicarchive.org/music/RoccoW/~/xyce_-_Quelle_Surprise_VRC6_Remix
rolemusic and roccow

http://indiegamemusic.com/diskspace/mr_lou/Action80kbps.mp3

===========================================
If you receive this error:
$ ./build_native.sh
./build_native.sh: line 4: syntax error near unexpected token `$'{\r''
'/build_native.sh: line 4: `usage(){

Then open file in notepad and do this:
Edit>EOL Conversion>Unix